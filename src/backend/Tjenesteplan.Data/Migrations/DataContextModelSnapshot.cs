// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tjenesteplan.Data.Contexts;

namespace Tjenesteplan.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tjenesteplan.Data.Features.Avdelinger.AvdelingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ListeforerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SykehusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListeforerId");

                    b.HasIndex("SykehusId");

                    b.ToTable("Avdelinger");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Avdelinger.UserAvdelingEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AvdelingId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AvdelingId");

                    b.HasIndex("AvdelingId");

                    b.ToTable("UserAvdelinger");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Invitations.InvitationEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvdelingId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Guid");

                    b.HasIndex("AvdelingId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Notifications.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Sykehus.SykehusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sykehus");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvdelingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvdelingId");

                    b.ToTable("Tjenesteplaner");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanUkeEntity", b =>
                {
                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.Property<int>("TjenesteplanUkeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TjenesteplanId", "TjenesteplanUkeId");

                    b.HasIndex("UserId");

                    b.ToTable("TjenesteplanUker");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanUkedagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dagsplan")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.Property<int>("TjenesteplanUkeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TjenesteplanId", "TjenesteplanUkeId");

                    b.ToTable("TjenesteplanUkedager");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.UserTjenesteplanEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TjenesteplanId");

                    b.HasIndex("TjenesteplanId");

                    b.ToTable("UserTjenesteplan");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.TjenesteplanChanges.TjenesteplanChangeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Dagsplan")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VakansvaktRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("VaktChangeRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TjenesteplanId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaktChangeRequestId");

                    b.ToTable("TjenesteplanChanges");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Vakansvakter.VakansvaktRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoveredByLegeId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentDagsplan")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalLegeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedDagsplan")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoveredByLegeId");

                    b.HasIndex("OriginalLegeId");

                    b.HasIndex("TjenesteplanId");

                    b.ToTable("VakansvaktRequests");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeAlternativeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaktChangeRequestReplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaktChangeRequestReplyId");

                    b.ToTable("VaktChangeAlternatives");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Dagsplan")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestRegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TjenesteplanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VaktChangeChosenAlternativeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TjenesteplanId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaktChangeChosenAlternativeId");

                    b.ToTable("VaktChangeRequests");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestReplyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfRemindersSent")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VaktChangeRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VaktChangeRequestId");

                    b.ToTable("VaktChangeRequestReplies");
                });

            modelBuilder.Entity("WebApi.Features.Users.Data.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SpesialitetId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Avdelinger.AvdelingEntity", b =>
                {
                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "Listefører")
                        .WithMany()
                        .HasForeignKey("ListeforerId");

                    b.HasOne("Tjenesteplan.Data.Features.Sykehus.SykehusEntity", "Sykehus")
                        .WithMany("Avdelinger")
                        .HasForeignKey("SykehusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Avdelinger.UserAvdelingEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Avdelinger.AvdelingEntity", "Avdeling")
                        .WithMany("Users")
                        .HasForeignKey("AvdelingId")
                        .IsRequired();

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany("Avdelinger")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Invitations.InvitationEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Avdelinger.AvdelingEntity", "Avdeling")
                        .WithMany()
                        .HasForeignKey("AvdelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Notifications.NotificationEntity", b =>
                {
                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Avdelinger.AvdelingEntity", "Avdeling")
                        .WithMany("Tjenesteplaner")
                        .HasForeignKey("AvdelingId")
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanUkeEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", "Tjenesteplan")
                        .WithMany("Weeks")
                        .HasForeignKey("TjenesteplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanUkedagEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanUkeEntity", "TjenesteplanUke")
                        .WithMany("Days")
                        .HasForeignKey("TjenesteplanId", "TjenesteplanUkeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Tjenesteplan.Data.UserTjenesteplanEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", "Tjenesteplan")
                        .WithMany("Leger")
                        .HasForeignKey("TjenesteplanId")
                        .IsRequired();

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany("Tjenesteplaner")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.TjenesteplanChanges.TjenesteplanChangeEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", "Tjenesteplan")
                        .WithMany()
                        .HasForeignKey("TjenesteplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestEntity", "VaktChangeRequest")
                        .WithMany()
                        .HasForeignKey("VaktChangeRequestId");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.Vakansvakter.VakansvaktRequestEntity", b =>
                {
                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "CoveredByLege")
                        .WithMany()
                        .HasForeignKey("CoveredByLegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "OriginalLege")
                        .WithMany()
                        .HasForeignKey("OriginalLegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", "Tjenesteplan")
                        .WithMany("VakansvaktRequests")
                        .HasForeignKey("TjenesteplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeAlternativeEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestReplyEntity", "VaktChangeRequestReply")
                        .WithMany("VaktChangeRequestAlternatives")
                        .HasForeignKey("VaktChangeRequestReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestEntity", b =>
                {
                    b.HasOne("Tjenesteplan.Data.Features.Tjenesteplan.Data.TjenesteplanEntity", "Tjenesteplan")
                        .WithMany("VaktChangeRequests")
                        .HasForeignKey("TjenesteplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany("VaktChangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeAlternativeEntity", "VaktChangeChosenAlternative")
                        .WithMany()
                        .HasForeignKey("VaktChangeChosenAlternativeId");
                });

            modelBuilder.Entity("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestReplyEntity", b =>
                {
                    b.HasOne("WebApi.Features.Users.Data.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tjenesteplan.Data.Features.VaktChangeRequests.VaktChangeRequestEntity", "VaktChangeRequest")
                        .WithMany("VaktChangeRequestsReplies")
                        .HasForeignKey("VaktChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
